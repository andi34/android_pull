From c0079a027a4e08739783f7134bb5c9aea3becbaf Mon Sep 17 00:00:00 2001
From: Steve Kondik <shade@chemlab.org>
Date: Sat, 6 Jul 2013 04:00:54 -0700
Subject: [PATCH 3/5] vold: exFAT support

 * Add support for exFAT using FUSE implementation.
Change-Id: I590c7b1bc8fbcb8c0b2c669f4073ac022857e4da

Author: Ricardo Cerqueira <cyanogenmod@cerqueira.org>
vold: Replace usage of discontinued logwrap()
Change-Id: Ia76bf8998064beee5e0ea4451c4dd8418c2193c4

Change-Id: I590c7b1bc8fbcb8c0b2c669f4073ac022857e4da
---
 Android.mk |   1 +
 Exfat.cpp  | 167 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Exfat.h    |  30 +++++++++++
 Volume.cpp |  22 +++++++-
 4 files changed, 219 insertions(+), 1 deletion(-)
 create mode 100644 Exfat.cpp
 create mode 100644 Exfat.h

diff --git a/Android.mk b/Android.mk
index 6668518..242cdad 100644
--- a/Android.mk
+++ b/Android.mk
@@ -12,6 +12,7 @@ common_src_files := \
 	Ext4.cpp \
 	Fat.cpp \
 	Ntfs.cpp \
+	Exfat.cpp \
 	Loop.cpp \
 	Devmapper.cpp \
 	ResponseCode.cpp \
diff --git a/Exfat.cpp b/Exfat.cpp
new file mode 100644
index 0000000..f19569c
--- /dev/null
+++ b/Exfat.cpp
@@ -0,0 +1,167 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+#include <sys/wait.h>
+
+#include <linux/kdev_t.h>
+#include <logwrap/logwrap.h>
+#include "VoldUtil.h"
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "Exfat.h"
+
+static char EXFAT_FSCK[] = "/system/bin/fsck.exfat";
+static char EXFAT_MKFS[] = "/system/bin/mkfs.exfat";
+static char EXFAT_MOUNT[] = "/system/bin/mount.exfat";
+
+int Exfat::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask) {
+
+    int rc = -1;
+    char mountData[255];
+    const char *args[6];
+    int status;
+
+    if (access(EXFAT_MOUNT, X_OK)) {
+        SLOGE("Unable to mount, exFAT FUSE helper not found!");
+        return rc;
+    }
+
+    sprintf(mountData,
+            "noatime,nodev,nosuid,dirsync,uid=%d,gid=%d,fmask=%o,dmask=%o,%s,%s",
+            ownerUid, ownerGid, permMask, permMask,
+            (executable ? "exec" : "noexec"),
+            (ro ? "ro" : "rw"));
+
+    args[0] = EXFAT_MOUNT;
+    args[1] = "-o";
+    args[2] = mountData;
+    args[3] = fsPath;
+    args[4] = mountPoint;
+    args[5] = NULL;
+
+    SLOGW("Executing exFAT mount (%s) -> (%s)", fsPath, mountPoint);
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        strcat(mountData, ",ro");
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+    }
+
+    return rc;
+}
+
+int Exfat::check(const char *fsPath) {
+
+    bool rw = true;
+    int rc = -1;
+    int status;
+
+    if (access(EXFAT_FSCK, X_OK)) {
+        SLOGW("Skipping fs checks, exfatfsck not found.\n");
+        return 0;
+    }
+
+    do {
+        const char *args[3];
+        args[0] = EXFAT_FSCK;
+        args[1] = fsPath;
+        args[2] = NULL;
+
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+        switch(rc) {
+        case 0:
+            SLOGI("exFAT filesystem check completed OK.\n");
+            return 0;
+        case 1:
+            SLOGI("exFAT filesystem check completed, errors corrected OK.\n");
+            return 0;
+        case 2:
+            SLOGE("exFAT filesystem check completed, errors corrected, need reboot.\n");
+            return 0;
+        case 4:
+            SLOGE("exFAT filesystem errors left uncorrected.\n");
+            return 0;
+        case 8:
+            SLOGE("exfatfsck operational error.\n");
+            errno = EIO;
+            return -1;
+        default:
+            SLOGE("exFAT filesystem check failed (unknown exit code %d).\n", rc);
+            errno = EIO;
+            return -1;
+        }
+    } while (0);
+
+    return 0;
+}
+
+int Exfat::format(const char *fsPath) {
+
+    int fd;
+    const char *args[3];
+    int rc = -1;
+    int status;
+
+    if (access(EXFAT_MKFS, X_OK)) {
+        SLOGE("Unable to format, mkexfatfs not found.");
+        return -1;
+    }
+
+    args[0] = EXFAT_MKFS;
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc == 0) {
+        SLOGI("Filesystem (exFAT) formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format (exFAT) failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
diff --git a/Exfat.h b/Exfat.h
new file mode 100644
index 0000000..94c1d05
--- /dev/null
+++ b/Exfat.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef _EXFAT_H
+#define _EXFAT_H
+
+#include <unistd.h>
+
+class Exfat {
+public:
+    static int doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
+            bool executable, int ownerUid, int ownerGid, int permMask);
+    static int check(const char *fsPath);
+    static int format(const char *fsPath);
+};
+
+#endif
diff --git a/Volume.cpp b/Volume.cpp
index abe570c..4af1fc1 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -49,6 +49,7 @@
 #include "ResponseCode.h"
 #include "Fat.h"
 #include "Ntfs.h"
+#include "Exfat.h"
 #include "Process.h"
 #include "cryptfs.h"
 
@@ -298,7 +299,9 @@ int Volume::formatVol(bool wipe) {
         SLOGI("Formatting volume %s (%s) as %s", getLabel(), devicePath, fstype);
     }
 
-    if (strcmp(fstype, "ntfs") == 0) {
+    if (strcmp(fstype, "exfat") == 0) {
+        ret = Exfat::format(devicePath);
+    } else if (strcmp(fstype, "ntfs") == 0) {
         ret = Ntfs::format(devicePath, wipe);
     } else {
         ret = Fat::format(devicePath, 0, wipe);
@@ -483,6 +486,23 @@ int Volume::mountVol() {
                     continue;
                 }
 
+            } else if (strcmp(fstype, "exfat") == 0) {
+
+                if (Exfat::check(devicePath)) {
+                    errno = EIO;
+                    /* Badness - abort the mount */
+                    SLOGE("%s failed FS checks (%s)", devicePath, strerror(errno));
+                    setState(Volume::State_Idle);
+                    free(fstype);
+                    return -1;
+                }
+
+                if (Exfat::doMount(devicePath, getMountpoint(), false, false, false,
+                        AID_MEDIA_RW, AID_MEDIA_RW, 0007)) {
+                    SLOGE("%s failed to mount via EXFAT (%s)\n", devicePath, strerror(errno));
+                    continue;
+                }
+
             } else {
                 // Unsupported filesystem
                 errno = ENODATA;
-- 
2.7.4

