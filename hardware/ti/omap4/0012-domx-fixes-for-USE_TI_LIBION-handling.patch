From cd908f0a138cf9520415e65bd9d4e3626b9a7449 Mon Sep 17 00:00:00 2001
From: Hashcode <hashcode0f@gmail.com>
Date: Thu, 25 Aug 2016 09:34:46 -0700
Subject: [PATCH 12/18] domx: fixes for USE_TI_LIBION handling

Change-Id: Ic330821b832713a08d491d1926144e26d19f78ec
---
 domx/domx/omx_proxy_common/src/omx_proxy_common.c | 30 ++++++++++++++++++++---
 domx/domx/plugins/memplugin_ion.c                 | 18 ++++++++++++--
 2 files changed, 43 insertions(+), 5 deletions(-)

diff --git a/domx/domx/omx_proxy_common/src/omx_proxy_common.c b/domx/domx/omx_proxy_common/src/omx_proxy_common.c
index 1928c74..22a02ea 100644
--- a/domx/domx/omx_proxy_common/src/omx_proxy_common.c
+++ b/domx/domx/omx_proxy_common/src/omx_proxy_common.c
@@ -156,7 +156,11 @@ RPC_OMX_ERRORTYPE RPC_RegisterBuffer(OMX_HANDLETYPE hRPCCtx, int fd1, int fd2,
             goto EXIT;
         }
         ion_data.fd = fd1;
+#ifdef USE_TI_LIBION
 	ion_data.handle = NULL;
+#else
+	ion_data.handle = 0;
+#endif
 	status = ioctl(pRPCCtx->fd_omx, OMX_IOCIONREGISTER, &ion_data);
 	if (status < 0) {
 		DOMX_ERROR("RegisterBuffer ioctl call failed");
@@ -172,7 +176,11 @@ RPC_OMX_ERRORTYPE RPC_RegisterBuffer(OMX_HANDLETYPE hRPCCtx, int fd1, int fd2,
 		goto EXIT;
 	}
         ion_data.fd = fd2;
+#ifdef USE_TI_LIBION
 	ion_data.handle = NULL;
+#else
+	ion_data.handle = 0;
+#endif
 	status = ioctl(pRPCCtx->fd_omx, OMX_IOCIONREGISTER, &ion_data);
 	if (status < 0) {
 	   DOMX_ERROR("RegisterBuffer ioctl call failed");
@@ -235,9 +243,13 @@ RPC_OMX_ERRORTYPE RPC_RegisterBuffer(OMX_HANDLETYPE hRPCCtx, int fd1, int fd2,
     }
     else if(proxyBufferType == VirtualPointers || proxyBufferType == IONPointers || proxyBufferType == EncoderMetadataPointers)
     {
-        struct ion_fd_data ion_data;
-        ion_data.fd = fd1;
+		struct ion_fd_data ion_data;
+		ion_data.fd = fd1;
+#ifdef USE_TI_LIBION
 		ion_data.handle = NULL;
+#else
+		ion_data.handle = 0;
+#endif
 		status = ioctl(pRPCCtx->fd_omx, OMX_IOCIONREGISTER, &ion_data);
 		if (status < 0) {
 			DOMX_ERROR("RegisterBuffer ioctl call failed");
@@ -279,7 +291,11 @@ RPC_OMX_ERRORTYPE RPC_UnRegisterBuffer(OMX_HANDLETYPE hRPCCtx, OMX_PTR handle1,
 	}
     if(proxyBufferType == BufferDescriptorVirtual2D || proxyBufferType == GrallocPointers)
     {
+#ifdef USE_TI_LIBION
 		data.handle = handle1;
+#else
+		data.handle = (ion_user_handle_t)handle1;
+#endif
 		status = ioctl(pRPCCtx->fd_omx, OMX_IOCIONUNREGISTER, &data);
 		if (status < 0) {
 			DOMX_ERROR("UnregisterBuffer ioctl call failed for handle1: 0x%x",handle1);
@@ -288,7 +304,11 @@ RPC_OMX_ERRORTYPE RPC_UnRegisterBuffer(OMX_HANDLETYPE hRPCCtx, OMX_PTR handle1,
 		}
 		if(handle2 != NULL)
 		{
+#ifdef USE_TI_LIBION
 			data.handle = handle2;
+#else
+			data.handle = (ion_user_handle_t)handle2;
+#endif
 			status = ioctl(pRPCCtx->fd_omx, OMX_IOCIONUNREGISTER, &data);
 			if (status < 0) {
 				DOMX_ERROR("UnregisterBuffer ioctl call failed for handle2: 0x%x",handle2);
@@ -300,7 +320,11 @@ RPC_OMX_ERRORTYPE RPC_UnRegisterBuffer(OMX_HANDLETYPE hRPCCtx, OMX_PTR handle1,
     }
     else if(proxyBufferType == VirtualPointers || proxyBufferType == IONPointers || proxyBufferType == EncoderMetadataPointers)
     {
-        data.handle = handle1;
+#ifdef USE_TI_LIBION
+		data.handle = handle1;
+#else
+		data.handle = (ion_user_handle_t)handle1;
+#endif
 		status = ioctl(pRPCCtx->fd_omx, OMX_IOCIONUNREGISTER, &data);
 		if (status < 0) {
 			DOMX_ERROR("UnregisterBuffer ioctl call failed");
diff --git a/domx/domx/plugins/memplugin_ion.c b/domx/domx/plugins/memplugin_ion.c
index b4b92dd..a4bc53b 100755
--- a/domx/domx/plugins/memplugin_ion.c
+++ b/domx/domx/plugins/memplugin_ion.c
@@ -165,8 +165,10 @@ MEMPLUGIN_ERRORTYPE MemPlugin_ION_Alloc(void *pMemPluginHandle, OMX_U32 nClient,
                                     sIonParams.alloc_flags,
 #ifndef USE_TI_LIBION
                                     0,
-#endif
+                                    (ion_user_handle_t *)&temp);
+#else
                                     &temp);
+#endif
         if(ret || (int)temp == -ENOMEM)
         {
             if(sIonParams.alloc_flags != OMAP_ION_HEAP_SECURE_INPUT)
@@ -230,7 +232,11 @@ MEMPLUGIN_ERRORTYPE MemPlugin_ION_Alloc(void *pMemPluginHandle, OMX_U32 nClient,
     if(pIonBufferParams->bMap == OMX_TRUE)
     {
         ret = (OMX_S16) ion_map(nClient,
+#ifdef USE_TI_LIBION
                                 pIonBufferProp->sBuffer_accessor.pBufferHandle,
+#else
+                                (ion_user_handle_t)pIonBufferProp->sBuffer_accessor.pBufferHandle,
+#endif
                                 pIonBufferParams->nWidth*pIonBufferParams->nHeight,
                                 sIonParams.prot,
                                 sIonParams.map_flags,
@@ -248,8 +254,12 @@ MEMPLUGIN_ERRORTYPE MemPlugin_ION_Alloc(void *pMemPluginHandle, OMX_U32 nClient,
     else
     {
         ret = (OMX_S16) ion_share(nClient,
+#ifdef USE_TI_LIBION
                                     pIonBufferProp->sBuffer_accessor.pBufferHandle,
-                                    &(pIonBufferProp->sBuffer_accessor.bufferFd));
+#else
+                                    (ion_user_handle_t)pIonBufferProp->sBuffer_accessor.pBufferHandle,
+#endif
+                                    (int *)&(pIonBufferProp->sBuffer_accessor.bufferFd));
         if(ret < 0)
         {
                 DOMX_ERROR("ION share returned error");
@@ -283,7 +293,11 @@ MEMPLUGIN_ERRORTYPE MemPlugin_ION_Free(void *pMemPluginHandle,OMX_U32 nClient,
     //close
     close(pIonBufferProp->sBuffer_accessor.bufferFd);
     //free
+#ifdef USE_TI_LIBION
     ion_free(nClient, (struct ion_handle*)pIonBufferProp->sBuffer_accessor.pBufferHandle);
+#else
+    ion_free(nClient, (ion_user_handle_t)pIonBufferProp->sBuffer_accessor.pBufferHandle);
+#endif
 
 EXIT:
       if (eError != MEMPLUGIN_ERROR_NONE) {
-- 
2.7.4

