From d14a434062570619c00a1dbffc950f697da24a46 Mon Sep 17 00:00:00 2001
From: Hashcode <hashcode0f@gmail.com>
Date: Sat, 21 Feb 2015 21:20:02 -0800
Subject: [PATCH 02/13] Add APIs/BOARD flag toggle for using standard google
 ION driver

I'm experimenting with a 3.4 kernel where I picked in the Google/ION
(dma-buf) driver changes in kernel/common's android-3.4 branch.

By using the standard kernel/common ION driver, we can now build the
libion userspace driver in system/core/libion instead of using TI's
ICS-based libion_ti driver.

If you are SURE that your kernel can support the newer dma-buf backed ION
driver, and you want to use these changes: set BOARD_USE_TI_LIBION := false
in your device *BEFORE* importing hardware/ti/omap4/BoardConfigCommon.mk

This removes libion_ti from the build and allows system/core/libion to build.
Additionally, much of the OMAP4 hardware support is changed to use the newer
ION API which includes dma-buf handles (camera, domx, hwc, bltsville, etc).

[updated for Android 5.1]
Change-Id: I8dd34a36f5b2bd77ce24233c8b7199c3380ee53c
---
 BoardConfigCommon.mk                               |  5 ++
 camera/Android.mk                                  | 11 ++--
 camera/MemoryManager.cpp                           | 20 ++++++-
 camera/inc/CameraHal.h                             |  3 +-
 common.mk                                          |  9 ++-
 domx/domx/Android.mk                               |  9 ++-
 domx/domx/omx_proxy_common/src/omx_proxy_common.c  |  4 ++
 domx/domx/plugins/inc/memplugin_ion.h              |  5 ++
 domx/domx/plugins/memplugin_ion.c                  |  3 +
 domx/omx_proxy_component/Android.mk                |  9 ++-
 .../omx_camera/src/omx_proxy_camera.c              |  5 ++
 hwc/Android.mk                                     | 13 +++-
 hwc/hwc.c                                          |  5 ++
 kernel-headers/linux/omap_ion.h                    | 22 +++++--
 libion/ion_ti_custom.c                             | 70 ++++++++++++++++++++++
 libion/ion_ti_custom.h                             | 13 ++++
 libion_ti/Android.mk                               |  5 ++
 pvr-source/eurasiacon/build/linux2/config/core.mk  |  7 ++-
 .../build/linux2/omap4430_android/Makefile         |  9 +++
 pvr-source/services4/srvkm/env/linux/mm.c          | 17 ++++++
 pvr-source/services4/srvkm/env/linux/module.c      |  2 +
 pvr-source/services4/srvkm/env/linux/osperproc.c   |  2 +
 symlinks/Android.mk                                |  3 +
 test/CameraHal/Android.mk                          | 14 ++---
 test/CameraHal/surfacetexture_test.cpp             |  7 ++-
 25 files changed, 243 insertions(+), 29 deletions(-)
 create mode 100644 libion/ion_ti_custom.c
 create mode 100644 libion/ion_ti_custom.h

diff --git a/BoardConfigCommon.mk b/BoardConfigCommon.mk
index 5529966..fdcadad 100644
--- a/BoardConfigCommon.mk
+++ b/BoardConfigCommon.mk
@@ -37,12 +37,17 @@ OMAP_ENHANCEMENT_MULTIGPU := true
 BOARD_USE_TI_ENHANCED_DOMX := true
 BOARD_USE_TI_DUCATI_H264_PROFILE := true
 BOARD_USE_TI_DOMX_LOW_SECURE_HEAP := true
+BOARD_USE_TI_LIBION ?= true
 COMMON_GLOBAL_CFLAGS += -DENHANCED_DOMX
 ENHANCED_DOMX := true
 TARGET_SPECIFIC_HEADER_PATH += $(OMAP4_NEXT_FOLDER)/domx/omx_core/inc
 BOARD_USE_TI_CUSTOM_DOMX := true
 DOMX_PATH := $(OMAP4_NEXT_FOLDER)/domx
 
+ifeq ($(BOARD_USE_TI_LIBION),true)
+    COMMON_GLOBAL_CFLAGS += -DUSE_TI_LIBION
+endif
+
 ifdef OMAP_ENHANCEMENT
     COMMON_GLOBAL_CFLAGS += -DOMAP_ENHANCEMENT -DTARGET_OMAP4 -DFORCE_SCREENSHOT_CPU_PATH
 endif
diff --git a/camera/Android.mk b/camera/Android.mk
index bde06aa..0346ceb 100755
--- a/camera/Android.mk
+++ b/camera/Android.mk
@@ -169,13 +169,12 @@ TI_CAMERAHAL_COMMON_SHARED_LIBRARIES := \
     libjpeg \
     $(TI_CAMERAHAL_EXIF_LIBRARY)
 
-ifdef ANDROID_API_JB_MR1_OR_LATER
-TI_CAMERAHAL_COMMON_SHARED_LIBRARIES += \
-    libion_ti
-TI_CAMERAHAL_COMMON_CFLAGS += -DUSE_LIBION_TI
+ifeq ($(BOARD_USE_TI_LIBION),true)
+TI_CAMERAHAL_COMMON_SHARED_LIBRARIES += libion_ti
 else
-TI_CAMERAHAL_COMMON_SHARED_LIBRARIES += \
-    libion
+TI_CAMERAHAL_COMMON_SHARED_LIBRARIES += libion
+TI_CAMERAHAL_COMMON_SRC +=  ../libion/ion_ti_custom.c
+TI_CAMERAHAL_COMMON_INCLUDES += $(HARDWARE_TI_OMAP4_BASE)/libion
 endif
 
 TI_CAMERAHAL_OMX_SHARED_LIBRARIES := \
diff --git a/camera/MemoryManager.cpp b/camera/MemoryManager.cpp
index b684203..676ef2e 100644
--- a/camera/MemoryManager.cpp
+++ b/camera/MemoryManager.cpp
@@ -91,16 +91,20 @@ CameraBuffer* MemoryManager::allocateBufferList(int width, int height, const cha
         ///1D buffers
         for (int i = 0; i < numBufs; i++) {
             unsigned char *data;
-#ifdef USE_LIBION_TI
+#ifdef USE_TI_LIBION
             int ret = ion_alloc(mIonFd, size, 0, 1 << ION_HEAP_TYPE_CARVEOUT,
                     &handle);
 #else
             int ret = ion_alloc(mIonFd, size, 0, 1 << ION_HEAP_TYPE_CARVEOUT, 0,
-                    &handle);
+                    (ion_user_handle_t*)&handle);
 #endif
             if((ret < 0) || ((int)handle == -ENOMEM)) {
                 ret = ion_alloc_tiler(mIonFd, (size_t)size, 1, TILER_PIXEL_FMT_PAGE,
+#ifdef USE_TI_LIBION
                 OMAP_ION_HEAP_TILER_MASK, &handle, &stride);
+#else
+                OMAP_ION_HEAP_TILER_MASK, (ion_user_handle_t*)&handle, &stride);
+#endif
             }
 
             if((ret < 0) || ((int)handle == -ENOMEM)) {
@@ -109,10 +113,18 @@ CameraBuffer* MemoryManager::allocateBufferList(int width, int height, const cha
             }
 
             CAMHAL_LOGDB("Before mapping, handle = %p, nSize = %d", handle, size);
+#ifdef USE_TI_LIBION
             if ((ret = ion_map(mIonFd, handle, size, PROT_READ | PROT_WRITE, MAP_SHARED, 0,
+#else
+            if ((ret = ion_map(mIonFd, (ion_user_handle_t)handle, size, PROT_READ | PROT_WRITE, MAP_SHARED, 0,
+#endif
                           &data, &mmap_fd)) < 0) {
                 CAMHAL_LOGEB("Userspace mapping of ION buffers returned error %d", ret);
+#ifdef USE_TI_LIBION
                 ion_free(mIonFd, handle);
+#else
+                ion_free(mIonFd, (ion_user_handle_t)handle);
+#endif
                 goto error;
             }
 
@@ -193,7 +205,11 @@ int MemoryManager::freeBufferList(CameraBuffer *buffers)
             {
             munmap(buffers[i].opaque, buffers[i].size);
             close(buffers[i].fd);
+#ifdef USE_TI_LIBION
             ion_free(mIonFd, buffers[i].ion_handle);
+#else
+            ion_free(mIonFd, (ion_user_handle_t)buffers[i].ion_handle);
+#endif
             }
         else
             {
diff --git a/camera/inc/CameraHal.h b/camera/inc/CameraHal.h
index b6d19b7..3eb1f78 100644
--- a/camera/inc/CameraHal.h
+++ b/camera/inc/CameraHal.h
@@ -48,10 +48,11 @@
 #include <ui/GraphicBufferMapper.h>
 #include <hal_public.h>
 
-#ifdef USE_LIBION_TI
+#ifdef USE_TI_LIBION
 #include <ion_ti/ion.h>
 #else
 #include <ion/ion.h>
+#include "ion_ti_custom.h"
 #endif
 
 #include "Common.h"
diff --git a/common.mk b/common.mk
index 59a118b..b0c3126 100644
--- a/common.mk
+++ b/common.mk
@@ -31,11 +31,18 @@ PRODUCT_PACKAGES += \
     libstagefrighthw \
     libI420colorconvert \
     libtiutils \
-    libion_ti \
     smc_pa_ctrl \
     tf_daemon \
     libtf_crypto_sst
 
+ifeq ($(BOARD_USE_TI_LIBION),false)
+PRODUCT_PACKAGES += \
+    libion
+else
+PRODUCT_PACKAGES += \
+    libion_ti
+endif
+
 # symlinks and pvr files
 PRODUCT_PACKAGES += \
     libion.so \
diff --git a/domx/domx/Android.mk b/domx/domx/Android.mk
index f173f69..e8b039b 100644
--- a/domx/domx/Android.mk
+++ b/domx/domx/Android.mk
@@ -36,9 +36,16 @@ LOCAL_SHARED_LIBRARIES := \
     libmm_osal \
     libc \
     liblog \
-    libion_ti \
     libcutils
 
+ifeq ($(BOARD_USE_TI_LIBION),true)
+LOCAL_SHARED_LIBRARIES += libion_ti
+else
+LOCAL_SHARED_LIBRARIES += libion
+LOCAL_SRC_FILES += ../../libion/ion_ti_custom.c
+LOCAL_C_INCLUDES += $(HARDWARE_TI_OMAP4_BASE)/libion
+endif
+
 LOCAL_MODULE:= libdomx
 LOCAL_MODULE_TAGS:= optional
 
diff --git a/domx/domx/omx_proxy_common/src/omx_proxy_common.c b/domx/domx/omx_proxy_common/src/omx_proxy_common.c
index 352640a..1928c74 100644
--- a/domx/domx/omx_proxy_common/src/omx_proxy_common.c
+++ b/domx/domx/omx_proxy_common/src/omx_proxy_common.c
@@ -76,7 +76,11 @@
 #ifdef ALLOCATE_TILER_BUFFER_IN_PROXY
 #ifdef USE_ION
 #include <unistd.h>
+#ifdef USE_TI_LIBION
 #include <ion_ti/ion.h>
+#else
+#include <ion/ion.h>
+#endif
 #include <sys/ioctl.h>
 #include <sys/mman.h>
 #include <sys/eventfd.h>
diff --git a/domx/domx/plugins/inc/memplugin_ion.h b/domx/domx/plugins/inc/memplugin_ion.h
index 9e5b4a5..25af549 100755
--- a/domx/domx/plugins/inc/memplugin_ion.h
+++ b/domx/domx/plugins/inc/memplugin_ion.h
@@ -38,7 +38,12 @@
  */
 
 #include <unistd.h>
+#ifdef USE_TI_LIBION
 #include <ion_ti/ion.h>
+#else
+#include <ion/ion.h>
+#include "ion_ti_custom.h"
+#endif
 #include <sys/ioctl.h>
 #include <sys/mman.h>
 #include <sys/eventfd.h>
diff --git a/domx/domx/plugins/memplugin_ion.c b/domx/domx/plugins/memplugin_ion.c
index 6199ea2..b4b92dd 100755
--- a/domx/domx/plugins/memplugin_ion.c
+++ b/domx/domx/plugins/memplugin_ion.c
@@ -163,6 +163,9 @@ MEMPLUGIN_ERRORTYPE MemPlugin_ION_Alloc(void *pMemPluginHandle, OMX_U32 nClient,
                                     pIonBufferParams->nWidth,
                                     sIonParams.nAlign,
                                     sIonParams.alloc_flags,
+#ifndef USE_TI_LIBION
+                                    0,
+#endif
                                     &temp);
         if(ret || (int)temp == -ENOMEM)
         {
diff --git a/domx/omx_proxy_component/Android.mk b/domx/omx_proxy_component/Android.mk
index ff13ae2..2dc71ac 100644
--- a/domx/omx_proxy_component/Android.mk
+++ b/domx/omx_proxy_component/Android.mk
@@ -101,9 +101,16 @@ LOCAL_SHARED_LIBRARIES := \
 	libc \
 	libOMX_Core \
 	liblog \
-	libion_ti \
 	libdomx
 
+ifeq ($(BOARD_USE_TI_LIBION),true)
+LOCAL_SHARED_LIBRARIES += libion_ti
+else
+LOCAL_SHARED_LIBRARIES += libion
+LOCAL_SRC_FILES += ../../libion/ion_ti_custom.c
+LOCAL_C_INCLUDES += $(HARDWARE_TI_OMAP4_BASE)/libion
+endif
+
 LOCAL_CFLAGS += -DTMS32060 -D_DB_TIOMAP -DSYSLINK_USE_SYSMGR -DSYSLINK_USE_LOADER
 LOCAL_CFLAGS += -D_Android -DSET_STRIDE_PADDING_FROM_PROXY -DANDROID_QUIRK_CHANGE_PORT_VALUES -DUSE_ENHANCED_PORTRECONFIG
 LOCAL_CFLAGS += -DANDROID_QUIRK_LOCK_BUFFER -DUSE_ION
diff --git a/domx/omx_proxy_component/omx_camera/src/omx_proxy_camera.c b/domx/omx_proxy_component/omx_camera/src/omx_proxy_camera.c
index 16b23e0..684b292 100755
--- a/domx/omx_proxy_component/omx_camera/src/omx_proxy_camera.c
+++ b/domx/omx_proxy_component/omx_camera/src/omx_proxy_camera.c
@@ -61,7 +61,12 @@
 
 #ifdef USE_ION
 #include <unistd.h>
+#ifdef USE_TI_LIBION
 #include <ion_ti/ion.h>
+#else
+#include <ion/ion.h>
+#include "ion_ti_custom.h"
+#endif
 #include <sys/ioctl.h>
 #include <sys/mman.h>
 #include <sys/eventfd.h>
diff --git a/hwc/Android.mk b/hwc/Android.mk
index 9c566f0..dbaa6d4 100644
--- a/hwc/Android.mk
+++ b/hwc/Android.mk
@@ -5,9 +5,18 @@ LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 LOCAL_ARM_MODE := arm
 LOCAL_MODULE_PATH := $(TARGET_OUT_SHARED_LIBRARIES)/../vendor/lib/hw
-LOCAL_SHARED_LIBRARIES := liblog libEGL libcutils libutils libhardware libhardware_legacy libz \
-                          libion_ti
+LOCAL_SHARED_LIBRARIES := liblog libEGL libcutils libutils libhardware libhardware_legacy libz
+
 LOCAL_SRC_FILES := hwc.c rgz_2d.c dock_image.c sw_vsync.c display.c
+
+ifeq ($(BOARD_USE_TI_LIBION),true)
+LOCAL_SHARED_LIBRARIES += libion_ti
+else
+LOCAL_SHARED_LIBRARIES += libion
+LOCAL_SRC_FILES += ../libion/ion_ti_custom.c
+LOCAL_C_INCLUDES += $(HARDWARE_TI_OMAP4_BASE)/libion
+endif
+
 LOCAL_STATIC_LIBRARIES := libpng
 
 LOCAL_MODULE_TAGS := optional
diff --git a/hwc/hwc.c b/hwc/hwc.c
index bb2770c..2a7fff9 100644
--- a/hwc/hwc.c
+++ b/hwc/hwc.c
@@ -41,7 +41,12 @@
 
 #include <linux/fb.h>
 #include <linux/omapfb.h>
+#ifdef USE_TI_LIBION
 #include <ion_ti/ion.h>
+#else
+#include <ion/ion.h>
+#include "ion_ti_custom.h"
+#endif
 
 #include "hwc_dev.h"
 #include "display.h"
diff --git a/kernel-headers/linux/omap_ion.h b/kernel-headers/linux/omap_ion.h
index 87fb5de..9c0e4c6 100644
--- a/kernel-headers/linux/omap_ion.h
+++ b/kernel-headers/linux/omap_ion.h
@@ -34,33 +34,43 @@ struct omap_ion_tiler_alloc_data {
  __u32 token;
 };
 enum {
+#ifdef USE_TI_LIBION
  OMAP_ION_HEAP_TYPE_TILER = ION_HEAP_TYPE_CUSTOM + 1,
-/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
  OMAP_ION_HEAP_TYPE_TILER_RESERVATION,
+#else
+ OMAP_ION_HEAP_SYSTEM = ION_HEAP_TYPE_CUSTOM + 1,
+ OMAP_ION_HEAP_SECURE_INPUT,
+ OMAP_ION_HEAP_TILER,
+ OMAP_ION_HEAP_NONSECURE_TILER,
+ OMAP_ION_HEAP_TILER_RESERVATION,
+#endif
 };
+#ifdef USE_TI_LIBION
 #define OMAP_ION_HEAP_TILER_MASK (1 << OMAP_ION_HEAP_TYPE_TILER)
+#else
+#define OMAP_ION_HEAP_TILER_MASK (1 << OMAP_ION_HEAP_TILER)
+#define OMAP_ION_HEAP_NONSECURE_TILER_MASK (1 << OMAP_ION_HEAP_NONSECURE_TILER)
+#define OMAP_ION_HEAP_TILER_RESERVATION_MASK (1 << OMAP_ION_HEAP_TILER_RESERVATION)
+#endif
 enum {
-/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
  OMAP_ION_TILER_ALLOC,
 };
 enum {
  TILER_PIXEL_FMT_MIN = 0,
-/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
  TILER_PIXEL_FMT_8BIT = 0,
  TILER_PIXEL_FMT_16BIT = 1,
  TILER_PIXEL_FMT_32BIT = 2,
  TILER_PIXEL_FMT_PAGE = 3,
-/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
  TILER_PIXEL_FMT_MAX = 3
 };
+#ifdef USE_TI_LIBION
 enum {
  OMAP_ION_HEAP_SYSTEM,
-/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
  OMAP_ION_HEAP_TILER,
  OMAP_ION_HEAP_SECURE_INPUT,
  OMAP_ION_HEAP_NONSECURE_TILER,
  OMAP_ION_HEAP_TILER_RESERVATION,
-/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */
  OMAP_ION_HEAP_SECURE_OUTPUT_WFDHDCP,
 };
 #endif
+#endif
diff --git a/libion/ion_ti_custom.c b/libion/ion_ti_custom.c
new file mode 100644
index 0000000..05fbb1e
--- /dev/null
+++ b/libion/ion_ti_custom.c
@@ -0,0 +1,70 @@
+/*
+ *  ion.c
+ *
+ * Memory Allocator functions for ion
+ *
+ * Copyright (C) Texas Instruments - http://www.ti.com/
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * 	 http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+#include <cutils/log.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <stdio.h>
+#include <sys/ioctl.h>
+#include <sys/mman.h>
+#include <sys/types.h>
+
+#include <linux/ion.h>
+#include <linux/omap_ion.h>
+#include <ion/ion.h>
+
+static int ion_ioctl(int fd, int req, void *arg)
+{
+        int ret = ioctl(fd, req, arg);
+        if (ret < 0) {
+                ALOGE("ioctl %x failed with code %d: %s\n", req,
+                       ret, strerror(errno));
+                return -errno;
+        }
+        return ret;
+}
+
+
+int ion_alloc_tiler(int fd, size_t w, size_t h, int fmt, unsigned int flags,
+            ion_user_handle_t*handle, size_t *stride)
+{
+        int ret;
+        struct omap_ion_tiler_alloc_data alloc_data = {
+                .w = w,
+                .h = h,
+                .fmt = fmt,
+                .flags = flags,
+                .out_align = PAGE_SIZE,
+                .token = 0,
+        };
+
+        struct ion_custom_data custom_data = {
+                .cmd = OMAP_ION_TILER_ALLOC,
+                .arg = (unsigned long)(&alloc_data),
+        };
+
+        ret = ion_ioctl(fd, ION_IOC_CUSTOM, &custom_data);
+        if (ret < 0)
+                return ret;
+        *stride = alloc_data.stride;
+        *handle = alloc_data.handle;
+        return ret;
+}
+
diff --git a/libion/ion_ti_custom.h b/libion/ion_ti_custom.h
new file mode 100644
index 0000000..dc2fdf3
--- /dev/null
+++ b/libion/ion_ti_custom.h
@@ -0,0 +1,13 @@
+#ifndef __ION_TI_CUSTOM_H
+#define __ION_TI_CUSTOM_H
+
+#include <linux/omap_ion.h>
+
+__BEGIN_DECLS
+
+int ion_alloc_tiler(int fd, size_t w, size_t h, int fmt, unsigned int flags,
+            ion_user_handle_t*handle, size_t *stride);
+
+__END_DECLS
+
+#endif /* __ION_TI_CUSTOM_H */
diff --git a/libion_ti/Android.mk b/libion_ti/Android.mk
index 671012e..ad24515 100644
--- a/libion_ti/Android.mk
+++ b/libion_ti/Android.mk
@@ -1,3 +1,6 @@
+# only include if running TI 3.0 kernel
+ifeq ($(BOARD_USE_TI_LIBION),true)
+
 LOCAL_PATH:= $(call my-dir)
 
 include $(CLEAR_VARS)
@@ -20,3 +23,5 @@ LOCAL_MODULE := ion_ti_test2
 LOCAL_MODULE_TAGS := optional tests
 LOCAL_SHARED_LIBRARIES := liblog
 include $(BUILD_EXECUTABLE)
+
+endif
diff --git a/pvr-source/eurasiacon/build/linux2/config/core.mk b/pvr-source/eurasiacon/build/linux2/config/core.mk
index 05a468b..9036e14 100644
--- a/pvr-source/eurasiacon/build/linux2/config/core.mk
+++ b/pvr-source/eurasiacon/build/linux2/config/core.mk
@@ -512,6 +512,9 @@ $(eval $(call TunableBothConfigC,PVRSRV_NEED_PVR_ASSERT,))
 $(eval $(call TunableBothConfigC,PVRSRV_NEED_PVR_TRACE,))
 $(eval $(call TunableBothConfigC,SUPPORT_SECURE_33657_FIX,))
 $(eval $(call TunableBothConfigC,SUPPORT_ION,))
+ifeq ($(USE_TI_LIBION),1)
+$(eval $(call TunableBothConfigC,SUPPORT_TI_LIBION,1))
+endif
 $(eval $(call TunableBothConfigC,SUPPORT_HWRECOVERY_TRACE_LIMIT,))
 $(eval $(call TunableBothConfigC,SUPPORT_PVRSRV_GET_DC_SYSTEM_BUFFER,1))
 $(eval $(call TunableBothConfigC,SUPPORT_NV12_FROM_2_HWADDRS,))
@@ -548,7 +551,9 @@ endif
 $(eval $(call TunableKernelConfigC,CONFIG_PVR_PROC_FS_HEAP_ALLOC_DEBUG,))
 
 $(eval $(call TunableBothConfigMake,SUPPORT_ION,))
-
+ifeq ($(USE_TI_LIBION),1)
+$(eval $(call TunableBothConfigMake,SUPPORT_TI_LIBION,1))
+endif
 
 $(eval $(call TunableBothConfigMake,OPTIM,))
 
diff --git a/pvr-source/eurasiacon/build/linux2/omap4430_android/Makefile b/pvr-source/eurasiacon/build/linux2/omap4430_android/Makefile
index 2b37cb3..32952c4 100644
--- a/pvr-source/eurasiacon/build/linux2/omap4430_android/Makefile
+++ b/pvr-source/eurasiacon/build/linux2/omap4430_android/Makefile
@@ -39,6 +39,15 @@
 # CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 ### ###########################################################################
 
+# ION can support dma-buf.
+# Use this toggle to determine how ion functions should work.
+ifeq ($(BOARD_USE_TI_LIBION),false)
+ USE_TI_LIBION := 0
+else
+ USE_TI_LIBION := 1
+endif
+export USE_TI_LIBION
+
 ifeq ($(TARGET_SGX),544sc)
  SGXCORE := 544
  SGX_CORE_REV := 112
diff --git a/pvr-source/services4/srvkm/env/linux/mm.c b/pvr-source/services4/srvkm/env/linux/mm.c
index 0815e46..6506053 100644
--- a/pvr-source/services4/srvkm/env/linux/mm.c
+++ b/pvr-source/services4/srvkm/env/linux/mm.c
@@ -1560,12 +1560,21 @@ NewIONLinuxMemArea(IMG_UINT32 ui32Bytes, IMG_UINT32 ui32AreaFlags,
         if(asAllocData[i].fmt == TILER_PIXEL_FMT_PAGE)
         {
 			/* 1D DMM Buffers */
+#if defined(SUPPORT_TI_LIBION)
 			struct scatterlist *sg, *sglist;
+#else
+			struct scatterlist *sg;
+			struct sg_table *sglist;
+#endif
 			IMG_UINT32 ui32Num1dPages;
 
 			asAllocData[i].handle = ion_alloc (gpsIONClient,
 				ui32Bytes,
+#if defined(SUPPORT_TI_LIBION)
 				PAGE_SIZE, (1 << OMAP_ION_HEAP_SYSTEM));
+#else
+				PAGE_SIZE, (1 << OMAP_ION_HEAP_SYSTEM), 0);
+#endif
 
 			if (asAllocData[i].handle == NULL)
 			{
@@ -1574,7 +1583,11 @@ NewIONLinuxMemArea(IMG_UINT32 ui32Bytes, IMG_UINT32 ui32AreaFlags,
 				goto err_free;
 			}
 
+#if defined(SUPPORT_TI_LIBION)
 			sglist = ion_map_dma (gpsIONClient, asAllocData[i].handle);
+#else
+			sglist = ion_sg_table (gpsIONClient, asAllocData[i].handle);
+#endif
 			if (sglist == NULL)
 			{
 				PVR_DPF((PVR_DBG_ERROR, "%s: Failed to compute pages",
@@ -1591,7 +1604,11 @@ NewIONLinuxMemArea(IMG_UINT32 ui32Bytes, IMG_UINT32 ui32AreaFlags,
 				goto err_free;
 			}
 
+#if defined(SUPPORT_TI_LIBION)
 			for_each_sg (sglist, sg, ui32Num1dPages, j)
+#else
+			for_each_sg (sglist->sgl, sg, ui32Num1dPages, j)
+#endif
 			{
 				pu32PageAddrs[i][j] = sg_phys (sg);
 			}
diff --git a/pvr-source/services4/srvkm/env/linux/module.c b/pvr-source/services4/srvkm/env/linux/module.c
index 4465f36..f1a6bbc 100644
--- a/pvr-source/services4/srvkm/env/linux/module.c
+++ b/pvr-source/services4/srvkm/env/linux/module.c
@@ -357,9 +357,11 @@ static int __devinit PVRSRVDriverProbe(LDM_DEV *pDevice, const struct pci_device
 
 #if defined(CONFIG_ION_OMAP)
 	gpsIONClient = ion_client_create(omap_ion_device,
+#if defined(SUPPORT_TI_LIBION)
 			1 << ION_HEAP_TYPE_CARVEOUT |
 			1 << OMAP_ION_HEAP_TYPE_TILER |
 			1 << ION_HEAP_TYPE_SYSTEM,
+#endif
 			"pvr");
 	if (IS_ERR_OR_NULL(gpsIONClient))
 	{
diff --git a/pvr-source/services4/srvkm/env/linux/osperproc.c b/pvr-source/services4/srvkm/env/linux/osperproc.c
index a22b461..4d96572 100644
--- a/pvr-source/services4/srvkm/env/linux/osperproc.c
+++ b/pvr-source/services4/srvkm/env/linux/osperproc.c
@@ -87,8 +87,10 @@ PVRSRV_ERROR OSPerProcessPrivateDataInit(IMG_HANDLE *phOsPrivateData)
 	OSSNPrintf(psEnvPerProc->azIonClientName, ION_CLIENT_NAME_SIZE, "pvr_ion_client-%d", OSGetCurrentProcessIDKM());
 	psEnvPerProc->psIONClient =
 		ion_client_create(psIonDev,
+#if defined(SUPPORT_TI_LIBION)
 						  1 << ION_HEAP_TYPE_SYSTEM_CONTIG |
 						  1 << ION_HEAP_TYPE_SYSTEM,
+#endif
 						  psEnvPerProc->azIonClientName);
  
 	if (IS_ERR_OR_NULL(psEnvPerProc->psIONClient))
diff --git a/symlinks/Android.mk b/symlinks/Android.mk
index cd745b0..d1d6729 100644
--- a/symlinks/Android.mk
+++ b/symlinks/Android.mk
@@ -1,6 +1,8 @@
 LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 
+ifeq ($(BOARD_USE_TI_LIBION),true)
+
 LOCAL_MODULE := libion.so
 LOCAL_MODULE_TAGS := optional
 LOCAL_MODULE_CLASS := FAKE
@@ -18,3 +20,4 @@ $(LOCAL_BUILT_MODULE):
 	$(hide) ln -sf $(TARGET) $(SYMLINK)
 	$(hide) touch $@
 
+endif
diff --git a/test/CameraHal/Android.mk b/test/CameraHal/Android.mk
index 8d34e81..60a6b92 100644
--- a/test/CameraHal/Android.mk
+++ b/test/CameraHal/Android.mk
@@ -69,14 +69,14 @@ LOCAL_SHARED_LIBRARIES:= \
 	libgui \
 	libcamera_client \
 	libEGL \
-    libGLESv2
+	libGLESv2
 
-ifdef ANDROID_API_JB_MR1_OR_LATER
-LOCAL_SHARED_LIBRARIES += \
-    libion_ti
+ifeq ($(BOARD_USE_TI_LIBION),true)
+LOCAL_SHARED_LIBRARIES += libion_ti
 else
-LOCAL_SHARED_LIBRARIES += \
-    libion
+LOCAL_SHARED_LIBRARIES += libion
+LOCAL_SRC_FILES += ../../libion/ion_ti_custom.c
+LOCAL_C_INCLUDES += $(HARDWARE_TI_OMAP4_BASE)/libion
 endif
 
 LOCAL_C_INCLUDES += \
@@ -84,7 +84,7 @@ LOCAL_C_INCLUDES += \
 	frameworks/base/include/ui \
 	frameworks/base/include/surfaceflinger \
 	frameworks/base/include/camera \
-    frameworks/base/include/media
+	frameworks/base/include/media
 
 LOCAL_MODULE:= surfacetexture_test
 LOCAL_MODULE_TAGS:= tests
diff --git a/test/CameraHal/surfacetexture_test.cpp b/test/CameraHal/surfacetexture_test.cpp
index afb08e3..08f6f72 100644
--- a/test/CameraHal/surfacetexture_test.cpp
+++ b/test/CameraHal/surfacetexture_test.cpp
@@ -73,10 +73,11 @@
 #include <gui/ISurfaceComposer.h>
 #include <gui/ISurfaceComposerClient.h>
 #include <gui/SurfaceComposerClient.h>
-#ifdef ANDROID_API_JB_MR1_OR_LATER
+#ifdef USE_TI_LIBION
 #include <ion_ti/ion.h>
 #else
 #include <ion/ion.h>
+#include "ion_ti_custom.h"
 #endif
 #else
 #include <surfaceflinger/Surface.h>
@@ -199,7 +200,11 @@ ion_test (void)
 #define SIZE (10*1024*1024)
     for(i=0;i<10;i++){
         handle = NULL;
+#ifdef USE_TI_LIBION
         ret = ion_alloc (fd, SIZE, 4096, (1<<0), &handle);
+#else
+        ret = ion_alloc (fd, SIZE, 4096, (1<<0), 0, &handle);
+#endif
         if (ret < 0) {
             printf("ion_alloc returned error %d, %s\n", ret, strerror(errno));
             break;
-- 
2.7.4

