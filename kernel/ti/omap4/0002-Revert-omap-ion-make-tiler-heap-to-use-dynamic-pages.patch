From b55f5066d381b0982c5633c0c20d20fa68fc34ee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?D=2E=20Andrei=20M=C4=83ce=C8=99?= <dmaces@nd.edu>
Date: Tue, 24 Nov 2015 13:06:42 -0500
Subject: [PATCH 002/111] Revert "omap: ion: make tiler heap to use dynamic
 pages if carveouts are not available"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This reverts commit 84fe39dc9f010651550832334104d6cc9f36bd9f.

Signed-off-by: D. Andrei Măceș <dmaces@nd.edu>
---
 drivers/gpu/ion/omap/omap_tiler_heap.c | 72 ++--------------------------------
 1 file changed, 4 insertions(+), 68 deletions(-)

diff --git a/drivers/gpu/ion/omap/omap_tiler_heap.c b/drivers/gpu/ion/omap/omap_tiler_heap.c
index 9294ee0..5abd9d5 100644
--- a/drivers/gpu/ion/omap/omap_tiler_heap.c
+++ b/drivers/gpu/ion/omap/omap_tiler_heap.c
@@ -25,14 +25,12 @@
 #include <linux/slab.h>
 #include <linux/vmalloc.h>
 #include <mach/tiler.h>
-#include <asm/cacheflush.h>
 #include <asm/mach/map.h>
 #include <asm/page.h>
-#include <plat/common.h>
 
 #include "../ion_priv.h"
+#include <asm/cacheflush.h>
 
-bool use_dynamic_pages;
 #define TILER_ENABLE_NON_PAGE_ALIGNED_ALLOCATIONS  1
 
 struct omap_ion_heap {
@@ -120,48 +118,6 @@ static void omap_tiler_free_carveout(struct ion_heap *heap,
 		gen_pool_free(omap_heap->pool, info->phys_addrs[i], PAGE_SIZE);
 }
 
-static int omap_tiler_alloc_dynamicpages(struct omap_tiler_info *info)
-{
-	int i;
-	int ret;
-	struct page *pg;
-
-	for (i = 0; i < info->n_phys_pages; i++) {
-		pg = alloc_page(GFP_KERNEL | GFP_DMA | GFP_HIGHUSER);
-		if (!pg) {
-			ret = -ENOMEM;
-			pr_err("%s: alloc_page failed\n",
-				__func__);
-			goto err_page_alloc;
-		}
-		info->phys_addrs[i] = page_to_phys(pg);
-		dmac_flush_range((void *)page_address(pg),
-			(void *)page_address(pg) + PAGE_SIZE);
-		outer_flush_range(info->phys_addrs[i],
-			info->phys_addrs[i] + PAGE_SIZE);
-	}
-	return 0;
-
-err_page_alloc:
-	for (i -= 1; i >= 0; i--) {
-		pg = phys_to_page(info->phys_addrs[i]);
-		__free_page(pg);
-	}
-	return ret;
-}
-
-static void omap_tiler_free_dynamicpages(struct omap_tiler_info *info)
-{
-	int i;
-	struct page *pg;
-
-	for (i = 0; i < info->n_phys_pages; i++) {
-		pg = phys_to_page(info->phys_addrs[i]);
-		__free_page(pg);
-	}
-	return;
-}
-
 int omap_tiler_alloc(struct ion_heap *heap,
 		     struct ion_client *client,
 		     struct omap_ion_tiler_alloc_data *data)
@@ -238,11 +194,7 @@ int omap_tiler_alloc(struct ion_heap *heap,
 
 	if ((heap->id == OMAP_ION_HEAP_TILER) ||
 	    (heap->id == OMAP_ION_HEAP_NONSECURE_TILER)) {
-		if (use_dynamic_pages)
-			ret = omap_tiler_alloc_dynamicpages(info);
-		else
-			ret = omap_tiler_alloc_carveout(heap, info);
-
+		ret = omap_tiler_alloc_carveout(heap, info);
 		if (ret)
 			goto err_alloc;
 
@@ -285,10 +237,7 @@ err:
 err_pin:
 	if ((heap->id == OMAP_ION_HEAP_TILER) ||
 	    (heap->id == OMAP_ION_HEAP_NONSECURE_TILER)) {
-		if (use_dynamic_pages)
-			omap_tiler_free_dynamicpages(info);
-		else
-			omap_tiler_free_carveout(heap, info);
+		omap_tiler_free_carveout(heap, info);
 	}
 err_alloc:
 	tiler_free_block_area(tiler_handle);
@@ -306,10 +255,7 @@ void omap_tiler_heap_free(struct ion_buffer *buffer)
 
 	if ((buffer->heap->id == OMAP_ION_HEAP_TILER) ||
 	    (buffer->heap->id == OMAP_ION_HEAP_NONSECURE_TILER)) {
-		if (use_dynamic_pages)
-			omap_tiler_free_dynamicpages(info);
-		else
-			omap_tiler_free_carveout(buffer->heap, info);
+		omap_tiler_free_carveout(buffer->heap, info);
 	}
 
 	kfree(info);
@@ -485,16 +431,6 @@ struct ion_heap *omap_tiler_heap_create(struct ion_platform_heap *data)
 	heap->heap.type = OMAP_ION_HEAP_TYPE_TILER;
 	heap->heap.name = data->name;
 	heap->heap.id = data->id;
-
-#ifdef CONFIG_ION_OMAP_TILER_DYNAMIC_ALLOC
-	use_dynamic_pages = true;
-#else
-	if (omap_total_ram_size() <= SZ_512M)
-		use_dynamic_pages = true;
-	else
-		use_dynamic_pages = false;
-#endif
-
 	return &heap->heap;
 }
 
-- 
2.7.4

