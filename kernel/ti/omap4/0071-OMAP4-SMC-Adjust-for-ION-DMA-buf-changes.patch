From 04ccf7426f8f54082124d716fb3942c4d9b5a716 Mon Sep 17 00:00:00 2001
From: Hashcode <hashcode0f@gmail.com>
Date: Wed, 18 Feb 2015 12:48:36 -0800
Subject: [PATCH 071/102] OMAP4: SMC: Adjust for ION/DMA-buf changes
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I97eb7fa751336bb1a56506fc8e194cdf7623e717
Signed-off-by: D. Andrei Măceș <dmaces@nd.edu>
---
 security/smc/tf_conn.c   | 10 +++++-----
 security/smc/tf_device.c |  2 +-
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/security/smc/tf_conn.c b/security/smc/tf_conn.c
index 0836619..3ae505c 100644
--- a/security/smc/tf_conn.c
+++ b/security/smc/tf_conn.c
@@ -1170,7 +1170,7 @@ int tf_invoke_client_command(
 			struct tf_command_invoke_client_command *invoke;
 			ion_phys_addr_t ion_addr;
 			size_t ion_len;
-			struct ion_buffer *buffer;
+			int buffer_fd;
 
 			if (connection->ion_client == NULL) {
 				connection->ion_client = ion_client_create(
@@ -1190,9 +1190,9 @@ int tf_invoke_client_command(
 
 			dprintk(KERN_INFO "ion_handle %x",
 				invoke->params[i].value.a);
-			buffer = ion_share(connection->ion_client,
+			buffer_fd = ion_share_dma_buf_fd(connection->ion_client,
 				(struct ion_handle *)invoke->params[i].value.a);
-			if (buffer == NULL) {
+			if (IS_ERR_VALUE(buffer_fd)) {
 				dprintk(KERN_ERR "%s(%p): "
 					"unable to share ion handle\n",
 					__func__, connection);
@@ -1200,8 +1200,8 @@ int tf_invoke_client_command(
 				goto error;
 			}
 
-			dprintk(KERN_INFO "ion_buffer %p", buffer);
-			new_handle = ion_import(connection->ion_client, buffer);
+			dprintk(KERN_INFO "ion_buffer_fd %d", buffer_fd);
+			new_handle = ion_import_dma_buf(connection->ion_client, buffer_fd);
 			if (new_handle == NULL) {
 				dprintk(KERN_ERR "%s(%p): "
 					"unable to import ion buffer\n",
diff --git a/security/smc/tf_device.c b/security/smc/tf_device.c
index 97cf560..a88631e 100644
--- a/security/smc/tf_device.c
+++ b/security/smc/tf_device.c
@@ -595,7 +595,7 @@ static long tf_device_ioctl(struct file *file, unsigned int ioctl_num,
 		 * TODO: We should use a reference count on this handle in order
 		 * to not unregistered it while using it.
 		 */
-	       return (long)ion_import_fd(connection->ion_client, ion_register);
+		return (long)ion_import_dma_buf(connection->ion_client, ion_register);
 	}
 
 	case IOCTL_TF_ION_UNREGISTER: {
-- 
2.7.4

