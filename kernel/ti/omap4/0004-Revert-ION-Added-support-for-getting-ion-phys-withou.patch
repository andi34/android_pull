From d3e1ec87cdb495f9195de2c78237fbb2927bff8f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?D=2E=20Andrei=20M=C4=83ce=C8=99?= <dmaces@nd.edu>
Date: Tue, 24 Nov 2015 13:13:44 -0500
Subject: [PATCH 004/111] Revert "ION: Added support for getting ion phys
 without client"
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This reverts commit c6f1d7f6c5d235d45b889368bb133af2ada47bdd.

Signed-off-by: D. Andrei Măceș <dmaces@nd.edu>
---
 drivers/gpu/ion/ion.c | 53 ---------------------------------------------------
 include/linux/ion.h   | 21 --------------------
 2 files changed, 74 deletions(-)

diff --git a/drivers/gpu/ion/ion.c b/drivers/gpu/ion/ion.c
index bafcc37..8fb1832 100644
--- a/drivers/gpu/ion/ion.c
+++ b/drivers/gpu/ion/ion.c
@@ -188,34 +188,6 @@ static bool ion_handle_validate(struct ion_client *client, struct ion_handle *ha
 	return false;
 }
 
-static bool ion_handle_validate_frm_dev(struct ion_device *dev,
-					struct ion_handle *handle)
-{
-	struct rb_node **p;
-	struct rb_node *parent = NULL;
-	struct ion_client *client;
-	struct rb_node *n;
-
-	p = &dev->user_clients.rb_node;
-	while (*p) {
-		parent = *p;
-		client = rb_entry(parent, struct ion_client, node);
-
-		n = client->handles.rb_node;
-		while (n) {
-			struct ion_handle *handle_node =
-					rb_entry(n, struct ion_handle, node);
-			if (handle < handle_node)
-				n = n->rb_left;
-			else if (handle > handle_node)
-				n = n->rb_right;
-			else
-				return true;
-		}
-	}
-	return false;
-}
-
 static void ion_handle_add(struct ion_client *client, struct ion_handle *handle)
 {
 	struct rb_node **p = &client->handles.rb_node;
@@ -370,31 +342,6 @@ int ion_phys(struct ion_client *client, struct ion_handle *handle,
 }
 EXPORT_SYMBOL(ion_phys);
 
-int ion_phys_frm_dev(struct ion_device *dev, struct ion_handle *handle,
-	     ion_phys_addr_t *addr, size_t *len)
-{
-	struct ion_buffer *buffer;
-	int ret;
-
-	/* TBD: Investigate why this validate_frm_dev is taking very long
-	* Once root-caused and fixed, then enable this below logic.
-	*/
-	/* if (!ion_handle_validate_frm_dev(dev, handle))
-		return -EINVAL;
-	*/
-
-	buffer = handle->buffer;
-
-	if (!buffer->heap->ops->phys) {
-		pr_err("%s: ion_phys is not implemented by this heap.\n", __func__);
-		return -ENODEV;
-	}
-	ret = buffer->heap->ops->phys(buffer->heap, buffer, addr, len);
-	return ret;
-}
-EXPORT_SYMBOL(ion_phys_frm_dev);
-
-
 void *ion_map_kernel(struct ion_client *client, struct ion_handle *handle)
 {
 	struct ion_buffer *buffer;
diff --git a/include/linux/ion.h b/include/linux/ion.h
index c1f2f33..a9146f2 100644
--- a/include/linux/ion.h
+++ b/include/linux/ion.h
@@ -147,27 +147,6 @@ void ion_free(struct ion_client *client, struct ion_handle *handle);
 int ion_phys(struct ion_client *client, struct ion_handle *handle,
 	     ion_phys_addr_t *addr, size_t *len);
 
-
-/**
- * ion_phys_frm_dev - returns the physical address and len of a handle
- * @dev:	ion_dev
- * @handle:	the handle
- * @addr:	a pointer to put the address in
- * @len:	a pointer to put the length in
- *
- * This function queries the heap for a particular handle to get the
- * handle's physical address.  It't output is only correct if
- * a heap returns physically contiguous memory -- in other cases
- * this api should not be implemented -- ion_map_dma should be used
- * instead.  Returns -EINVAL if the handle is invalid.  This has
- * no implications on the reference counting of the handle --
- * the returned value may not be valid if the caller is not
- * holding a reference.
- */
-int ion_phys_frm_dev(struct ion_device *dev, struct ion_handle *handle,
-			ion_phys_addr_t *addr, size_t *len);
-
-
 /**
  * ion_map_kernel - create mapping for the given handle
  * @client:	the client
-- 
2.7.4

