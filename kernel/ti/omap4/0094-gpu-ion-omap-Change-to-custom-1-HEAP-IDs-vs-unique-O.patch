From 3a2a20eb7ba31bdb9363c48211866027947dd395 Mon Sep 17 00:00:00 2001
From: Hashcode <hashcode0f@gmail.com>
Date: Sun, 22 Feb 2015 23:59:24 -0800
Subject: [PATCH 094/111] gpu: ion: omap: Change to custom+1 HEAP IDs vs unique
 OMAP enum
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: I0a4e5fdbf14b116892ae8b127e340bec0d58941a
Signed-off-by: D. Andrei Măceș <dmaces@nd.edu>
---
 arch/arm/mach-omap2/omap4_ion.c        | 14 +++++++-------
 drivers/gpu/ion/omap/omap_ion.c        |  8 ++++----
 drivers/gpu/ion/omap/omap_tiler_heap.c |  4 ++--
 include/linux/omap_ion.h               | 22 ++++++++--------------
 4 files changed, 21 insertions(+), 27 deletions(-)

diff --git a/arch/arm/mach-omap2/omap4_ion.c b/arch/arm/mach-omap2/omap4_ion.c
index a3f09d86..d39c76d 100644
--- a/arch/arm/mach-omap2/omap4_ion.c
+++ b/arch/arm/mach-omap2/omap4_ion.c
@@ -68,22 +68,22 @@ static struct ion_platform_heap omap4_ion_heaps[] = {
 		.id = OMAP_ION_HEAP_SECURE_INPUT,
 		.name = "secure_input",
 	},
-	{	.type = OMAP_ION_HEAP_TYPE_TILER,
+	{	.type = OMAP_ION_HEAP_TILER,
 		.id = OMAP_ION_HEAP_TILER,
 		.name = "tiler",
 	},
 	{
-		.type = OMAP_ION_HEAP_TYPE_TILER,
+		.type = OMAP_ION_HEAP_TILER,
 		.id = OMAP_ION_HEAP_NONSECURE_TILER,
 		.name = "nonsecure_tiler",
 	},
 	{
 		.type = ION_HEAP_TYPE_SYSTEM,
-		.id = OMAP_ION_HEAP_SYSTEM,
+		.id = ION_HEAP_TYPE_SYSTEM,
 		.name = "system",
 	},
 	{
-		.type = OMAP_ION_HEAP_TYPE_TILER_RESERVATION,
+		.type = OMAP_ION_HEAP_TILER_RESERVATION,
 		.id = OMAP_ION_HEAP_TILER_RESERVATION,
 		.name = "tiler_reservation",
 	},
@@ -251,13 +251,13 @@ void __init omap_ion_init(void)
 
 	for (i = 0; i < omap4_ion_data.nr; i++)
 		if (omap4_ion_data.heaps[i].type == ION_HEAP_TYPE_CARVEOUT ||
-		    omap4_ion_data.heaps[i].type == OMAP_ION_HEAP_TYPE_TILER) {
+		    omap4_ion_data.heaps[i].type == OMAP_ION_HEAP_TILER) {
+			if (!omap4_ion_data.heaps[i].size)
+				continue;
 #ifndef CONFIG_CMA
 			ret = memblock_remove(omap4_ion_data.heaps[i].base,
 					      omap4_ion_data.heaps[i].size);
 #endif
-			if (!omap4_ion_data.heaps[i].size)
-				continue;
 			if (ret)
 				pr_err("memblock remove of %x@%lx failed\n",
 				       omap4_ion_data.heaps[i].size,
diff --git a/drivers/gpu/ion/omap/omap_ion.c b/drivers/gpu/ion/omap/omap_ion.c
index 1761c87..ae64b93 100644
--- a/drivers/gpu/ion/omap/omap_ion.c
+++ b/drivers/gpu/ion/omap/omap_ion.c
@@ -116,14 +116,14 @@ int omap_ion_probe(struct platform_device *pdev)
 	for (i = 0; i < num_heaps; i++) {
 		struct ion_platform_heap *heap_data = &pdata->heaps[i];
 
-		if (heap_data->type == OMAP_ION_HEAP_TYPE_TILER) {
+		if (heap_data->type == OMAP_ION_HEAP_TILER) {
 			heaps[i] = omap_tiler_heap_create(heap_data);
 			if (heap_data->id == OMAP_ION_HEAP_NONSECURE_TILER)
 				nonsecure_tiler_heap = heaps[i];
 			else
 				tiler_heap = heaps[i];
 		} else if (heap_data->type ==
-				OMAP_ION_HEAP_TYPE_TILER_RESERVATION) {
+				OMAP_ION_HEAP_TILER_RESERVATION) {
 			heaps[i] = omap_tiler_heap_create(heap_data);
 		} else {
 			heaps[i] = ion_heap_create(heap_data);
@@ -144,7 +144,7 @@ int omap_ion_probe(struct platform_device *pdev)
 err:
 	for (i = 0; i < num_heaps; i++) {
 		if (heaps[i]) {
-			if (heaps[i]->type == OMAP_ION_HEAP_TYPE_TILER)
+			if (heaps[i]->type == OMAP_ION_HEAP_TILER)
 				omap_tiler_heap_destroy(heaps[i]);
 			else
 				ion_heap_destroy(heaps[i]);
@@ -161,7 +161,7 @@ int omap_ion_remove(struct platform_device *pdev)
 
 	ion_device_destroy(idev);
 	for (i = 0; i < num_heaps; i++)
-		if (heaps[i]->type == OMAP_ION_HEAP_TYPE_TILER)
+		if (heaps[i]->type == OMAP_ION_HEAP_TILER)
 			omap_tiler_heap_destroy(heaps[i]);
 		else
 			ion_heap_destroy(heaps[i]);
diff --git a/drivers/gpu/ion/omap/omap_tiler_heap.c b/drivers/gpu/ion/omap/omap_tiler_heap.c
index 23ecc87..498eb3c 100644
--- a/drivers/gpu/ion/omap/omap_tiler_heap.c
+++ b/drivers/gpu/ion/omap/omap_tiler_heap.c
@@ -305,7 +305,7 @@ int omap_tiler_alloc(struct ion_heap *heap,
 
 	/* This hack is to avoid the call itself from ion_alloc()
 		when the buffer and handle are created */
-	handle = ion_alloc(client, PAGE_ALIGN(1), 0, 1 << OMAP_ION_HEAP_TILER,
+	handle = ion_alloc(client, PAGE_ALIGN(1), 0, OMAP_ION_HEAP_TILER_MASK,
 		heap->flags | OMAP_ION_FLAG_NO_ALLOC_TILER_HEAP);
 	if (IS_ERR_OR_NULL(handle)) {
 		ret = PTR_ERR(handle);
@@ -502,7 +502,7 @@ struct ion_heap *omap_tiler_heap_create(struct ion_platform_heap *data)
 		gen_pool_add(heap->pool, heap->base, data->size, -1);
 	}
 	heap->heap.ops = &omap_tiler_ops;
-	heap->heap.type = OMAP_ION_HEAP_TYPE_TILER;
+	heap->heap.type = OMAP_ION_HEAP_TILER;
 	heap->heap.name = data->name;
 	heap->heap.id = data->id;
 
diff --git a/include/linux/omap_ion.h b/include/linux/omap_ion.h
index e2ef046..44345f5 100644
--- a/include/linux/omap_ion.h
+++ b/include/linux/omap_ion.h
@@ -84,11 +84,16 @@ bool omap_ion_rpmsg_free_memory(void);
 
 /* additional heaps used only on omap */
 enum {
-	OMAP_ION_HEAP_TYPE_TILER = ION_HEAP_TYPE_CUSTOM + 1,
-	OMAP_ION_HEAP_TYPE_TILER_RESERVATION,
+	OMAP_ION_HEAP_SYSTEM = ION_HEAP_TYPE_CUSTOM + 1,
+	OMAP_ION_HEAP_SECURE_INPUT,
+	OMAP_ION_HEAP_TILER,
+	OMAP_ION_HEAP_NONSECURE_TILER,
+	OMAP_ION_HEAP_TILER_RESERVATION,
 };
 
-#define OMAP_ION_HEAP_TILER_MASK (1 << OMAP_ION_HEAP_TYPE_TILER)
+#define OMAP_ION_HEAP_TILER_MASK (1 << OMAP_ION_HEAP_TILER)
+#define OMAP_ION_HEAP_NONSECURE_TILER_MASK (1 << OMAP_ION_HEAP_NONSECURE_TILER)
+#define OMAP_ION_HEAP_TILER_RESERVATION_MASK (1 << OMAP_ION_HEAP_TILER_RESERVATION)
 
 /**
  * allocation flags - the lower 16 bits are used by core ion, the upper 16
@@ -115,16 +120,5 @@ enum {
 	TILER_PIXEL_FMT_MAX   = 3
 };
 
-/**
- * List of heaps in the system
- */
-enum {
-	OMAP_ION_HEAP_SYSTEM,
-	OMAP_ION_HEAP_TILER,
-	OMAP_ION_HEAP_SECURE_INPUT,
-	OMAP_ION_HEAP_NONSECURE_TILER,
-	OMAP_ION_HEAP_TILER_RESERVATION,
-};
-
 #endif /* _LINUX_ION_H */
 
-- 
2.7.4

